using UnityEngine;

namespace Assets.Scripts.Entity
{
    public class Invulnerability : MonoBehaviour
    {
        [SerializeField] private float _invulnerabilityTime = 1f;
        [SerializeField] private string _layerMaskName;
        [SerializeField] private float _flashDuration = 0.1f;
        [SerializeField] private float _flashAlpha = 0.3f;
        [SerializeField] private bool _isInvulnerable = false;
        [SerializeField] private float _invulnerableEndTime = 0f;
        [SerializeField] private float _invulnerabilityTimer = 0f;

        private SpriteRenderer _spriteRenderer;
        private Color _originalColor;

        public void ApplyInvulnerable(Collision2D collision)
        {
            if (!_isInvulnerable && collision.gameObject.layer == LayerMask.NameToLayer(_layerMaskName))
            {
                Debug.LogWarning("Player is invulnerable");
                _isInvulnerable = true;
                _invulnerableEndTime = Time.timeSinceLevelLoad + _invulnerabilityTime;
                Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), true);
            }
        }

        private void Start()
        {
            _isInvulnerable = false;
            _spriteRenderer= GetComponent<SpriteRenderer>();
            _originalColor = _spriteRenderer.color;
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }

        private void FixedUpdate()
        {
            if (_isInvulnerable && Time.timeSinceLevelLoad > _invulnerableEndTime)
            {
                _isInvulnerable = false;
                Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
            }
        }

        private void OnDestroy()
        {
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }

        private void Update()
        {
            if (_isInvulnerable)
            {
                _invulnerabilityTimer += Time.deltaTime;

                float t = Mathf.PingPong(_invulnerabilityTimer / _flashDuration, 1f);
                _spriteRenderer.color = new Color(_originalColor.r, _originalColor.g, _originalColor.b, Mathf.Lerp(1f, _flashAlpha, t));
            }
            else
            {
                _spriteRenderer.color = Color.white;
            }
        }
    }
}