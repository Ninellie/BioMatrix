using UnityEngine;

namespace Assets.Scripts.EntityComponents
{
    public class Invulnerability : MonoBehaviour
    {
        [Header("Settings")]
        [SerializeField] private string _layerMaskName;
        [SerializeField] private float _invulnerabilityDuration = 1f;
        [field: Header("Indicator")]
        [field: SerializeField] public bool IsInvulnerable { get; private set; }
        [SerializeField] private float _invulnerabilityTimer;

        private void Start()
        {
            IsInvulnerable = false;
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }

        private void FixedUpdate()
        {
            if (!IsInvulnerable) return;
            _invulnerabilityTimer -= Time.fixedDeltaTime;
        }

        private void OnDestroy()
        {
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }

        public void ApplyInvulnerability()
        {
            IsInvulnerable = true;
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), true);
            _invulnerabilityTimer = _invulnerabilityDuration;
            Invoke(nameof(StopInvulnerability), _invulnerabilityDuration);
        }

        public void StopInvulnerability()
        {
            IsInvulnerable = false;
            _invulnerabilityTimer = 0;
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }
    }
}