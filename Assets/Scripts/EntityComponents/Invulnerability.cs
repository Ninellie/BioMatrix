using UnityEngine;

namespace Assets.Scripts.EntityComponents
{
    public class Invulnerability : MonoBehaviour
    {
        [SerializeField] private string _layerMaskName;
        [SerializeField] private float _invulnerabilityTime = 1f;
        [SerializeField] private float _flashDuration = 0.1f;
        [SerializeField] private float _flashAlpha = 0.3f;

        public bool IsInvulnerable { get; private set; }

        private float _invulnerableEndTime = 0f;
        private float _invulnerabilityTimer = 0f;
        private SpriteRenderer _spriteRenderer;
        private Color _originalColor;

        private void Start()
        {
            IsInvulnerable = false;
            _spriteRenderer= GetComponent<SpriteRenderer>();
            _originalColor = _spriteRenderer.color;
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }

        private void FixedUpdate()
        {
            if (!IsInvulnerable || !(Time.timeSinceLevelLoad > _invulnerableEndTime)) return;
            IsInvulnerable = false;
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }

        private void Update()
        {
            if (IsInvulnerable)
            {
                _invulnerabilityTimer += Time.deltaTime;

                var t = Mathf.PingPong(_invulnerabilityTimer / _flashDuration, 1f);
                var alpha = Mathf.Lerp(1f, _flashAlpha, t);
                _spriteRenderer.color = new Color(_originalColor.r, _originalColor.g, _originalColor.b, alpha);
            }
            else
            {
                _spriteRenderer.color = Color.white;
            }
        }

        private void OnDestroy()
        {
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), false);
        }

        public void ApplyInvulnerable()
        {
            IsInvulnerable = true;
            _invulnerableEndTime = Time.timeSinceLevelLoad + _invulnerabilityTime;
            Physics2D.IgnoreLayerCollision(gameObject.layer, LayerMask.NameToLayer(_layerMaskName), true);
        }

        public void SetInvulnerabilityTime(float invulnerabilityTime)
        {

        }
    }

}